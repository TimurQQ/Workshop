program Project8;

{$APPTYPE CONSOLE}

{$R *.res}

uses
  System.SysUtils;
type Elem = record
      Value : integer;
      Number : integer;
   end;
type
  Plist=^List;
  List=record
      item:Elem;
      next:PList;
      pre:PList;
   end;
var Pl:PList;
    n:integer;
procedure Swap(var P1,P2:PList);
  begin
    P1.next:=P2^.next;
    P2.pre:=P1^.pre;
    P2.next:=P1;
    P1.pre:=P2;
    P2.next:=P1;
  end;
procedure Bubble_Sort(var Pl:PList);
var ptr1,ptr2:PList;
  begin
    ptr1:=Pl;
    ptr2:=Pl;
    while(ptr1 <> nil) do
      begin
        while(ptr2^.next <> nil) do
          begin
            if (ptr2^.item.Number > (ptr2^.next)^.item.Number) then
              Swap(ptr2,ptr2^.next);
            ptr2:=ptr2^.next;
          end;
          ptr1:=ptr1^.next;
      end;
  end;
procedure Print_List(var Pl:PList);
var ptr:PList;
  begin
    ptr:=Pl;
    while(ptr <> nil)do
      begin
      Write(' (');
      Write(ptr^.item.Value);
      Write(',');
      Write(ptr^.item.Number);
      Write(') ');
      ptr:=ptr^.next;
      end;
  end;
function Get_List(k:integer):PList;
var Lp,Ls:PList;
    i:integer;
  begin
    i:=1;
    while i<=k do
      begin
        if Pl=nil then
          begin
            new(Lp);
            ReadLn(Lp^.item.Value);
            ReadLn(Lp^.item.Number);
            Lp^.next:=nil;
            Lp^.pre:=nil;
            Pl:=Lp;
          end
        else
          begin
            new(Ls);
            Lp^.next:=Ls;
            ReadLn(Ls^.item.Value);
            ReadLn(Ls^.item.Number);
            Ls^.next:=nil;
            Ls^.pre:=Lp;
            Lp:=Ls;
          end;
          i:=i+1;
      end;
    Get_List:=Pl;
  end;
begin
  ReadLn(n);
  Pl:=Get_List(n);
  Bubble_Sort(Pl);
  Print_List(Pl);
end.
